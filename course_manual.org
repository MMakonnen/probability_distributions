#+title:   Probability distributions: Course manual 
#+SUBTITLE: EBP038A05
#+author: Nicky D. van Foreest
#+date: {{{time(%Y-%m-%d)}}}

#+STARTUP: indent
#+STARTUP: overview 
#+OPTIONS:  toc:t num:t
#+OPTIONS: H:5

#+include: preamble.org

* Material

https://projects.iq.harvard.edu/stat110/home provides an electronic copy of the book, video lectures, and so on.  I expect you to watch the lectures on this site, for the overview and general background of the book. In my youtube movies I will address specific points, solve problems, and show how I do simulations. 

I advise you to buy the book as it makes studying easier, and it is very practical to look up things later.

I got the advice of  Blitzstein to use /named/ results, as this sticks much better. I fully agree with him, so here are some names 
- VOS law (Ch 7): Variance of sums: $\V{X+Y}= \cov{X+Y, X+Y} = \V X + \V Y + \cov{X,Y} + \cov{Y, X}$.
- LOTE  (Ch 9):  Law of total expectation: $\E{X} = \sum_{i} \E{X \given A_i} \P{A_i}$. 


* Schedule

We have two lectures a week for 7 weeks, hence 14 lectures.
Blitzstein made his lectures available on-line.
I expect you to watch them.
In our on-line lectures I will illustrate the material by solving problems.
I'll post the problems before the lecture.
I don't expect you to solve them before the lecture, but you should have read it at least, and have watched Blizstein's videos and have read the book.

#+CAPTION: schedule
| Lecture | section    |
|---------+------------|
|       1 | 7.1        |
|       2 | 7.1        |
|---------+------------|
|       3 | 7.2, 7.3   |
|       4 | 7.4, 75    |
|---------+------------|
|       5 | 8.1        |
|       6 | 8.2        |
|---------+------------|
|       7 | 8.3, 8.4   |
|       8 | 8.5        |
|---------+------------|
|       9 | 9.1        |
|      10 | 9.2,9.3    |
|---------+------------|
|      11 | 9.5, 9.6   |
|      12 | 9.6, 10.1  |
|---------+------------|
|      13 | 10.2       |
|      14 | 10.3, 10.4 |
|---------+------------|


* Exercises

Below is a selection of exercises I enjoyed making and find useful; nothing prevents you from doing more!
To assure you, I found the problems quite hard at times; probability never `comes for free'; not for you, not for me, not for anybody.
You can expect to spend between 30 minutes and 1 hour per problem; if you are serious.


I worked hard on making a set of hints, and I include many remarks and recipes (general strategies) I used to solve the exercises.
As you'll notice, I prefer to stay clear of quick and/or slick solutions.
Sure, such solutions can provide fast and elegant answers to hard questions, but such tricks often don't work in more general settings, and they depend on knowledge that takes a long time to acquire. In fact,  tricks give people (students and me alike) the feeling that `they will never learn probability because they don't know these shortcuts'. So, it's better to avoid that altogether, and for that reason  I tend to use plain and straightforward, but perhaps long and tedious, derivations.
You should learn and master the computational skills as you will need them time and again in many other courses.


There are also many problems with worked solutions on the web.
For this reason, I mostly selected problems without solutions (for those problems I feel compelled to write hints :-) )



Here is a list of good, and important, advice when making the exercises.
(As a student I did not always do this, partly because I was not aware about how useful this advice is. Hopefully you are smart enough to avoid making the same mistakes as I did as a student.
)
- Read an example in the book. Close the book, and try to redo the example. When I try, I often fail. Why is that? Simple, I did not really /think/ about the example while just reading it. Typically, I progress from /skimming/ to /reading/ to /studying/.
- Before trying to solve an exercise, read all parts of it, i.e., part a, b, etc. Ensure you /understand the problem./
- Before actually solving  an exercise, /make a plan on how to solve it/. A first step is to look for simple corner cases (set things to zero, make certain probabilities equal to one, and so on), make extra assumptions that simplify the problem, and solve the problem under these simpler (stronger) assumptions. Then drop an assumption, and try to generalize to a pattern or some property you expect to hold. You'll be astonished to see how many problems you can actually solve by following this strategy. And even if you cannot solve it with this approach, the corner cases help to check throughout whether you're still working in the right direction. Also, reduce the problem to simpler cases you do understand. Try to solve the simpler problem first, and then generalize.
- Carry out your plan. In my hints, you should notice that I often do not directly aim to solve just the exercise. Instead, I `play', I develop intuition, I try different ideas, I discover new things. And, I /relax/, even if I cannot directly find the answer.
- Look back right after solving the problem, and try to find a general pattern you used to solve the problem. Can you use this for other problems too?
- Look back again at the problem some time later. In other words, do not solve  a problem just once, but also a few weeks later again. This is often very revealing.
- Work every day a reasonable amount of time. This is much more effective than working 10 h on one day, and not at all the next. The concept is often called `Kaizen', try to improve every day a little bit. Over the course of time, you'll be amazed how much you can achieve.
- When I am stuck, this piece of advice of Jim Rohn (a author on personal development) helps: `Don't wish it was easier, wish you were better.'



** Chapter 7

|---------------------+------------------------------------------------|
| Joint               | 1, 9, 10, 11, 12, 13, 14, 15, 20, 23, 26, 29   |
| 2d Lotus            | 32, 33, 35, 36                                 |
| Covariance          | 38, 42, 46, 48, 51, 53, 58, 59                 |
| Chicken-egg         | 64                                             |
| Multinomial         | 65, 66, 68, 71, 73                             |
| Multivariate normal | 77                                             |
| Mixed practice      | 80, 82, 86, 87, 89                             |
|---------------------+------------------------------------------------|

** Chapter 8

|---------------------+----------------------------------|
| Change of variables | 1, 9, 10, 11, 12, 17, 15, 16, 18 |
| Convolutions        | 22, 23, 27                       |
| Beta and Gamma      | 31, 33, 34, 36, 37, 40           |
| Order statistics    | skip                             |
| Mixed practice      | 52, 54                           |
|---------------------+----------------------------------|

** Chapter 9

|--------------------------------------+----------------------------------------------|
| Condition expectation given an event | 1, 3, 7, 12                                  |
| Conditional exp given a r.v          | 15, 16, 18, 19, 21, 25, 28, 3235, 37, 39, 42 |
| Mixed practice                       | 50, 52, 55, 56, 58                           |
|--------------------------------------+----------------------------------------------|

** Chapter 10
|--------------------+----------------------------|
| Inequalities       | 1, 2, 8, 4, 6              |
| Fill in the blanks | 9, 15                      |
| LLN and CLT        | 21, 26, 27, 29, 30, 35, 39 |
|--------------------+----------------------------|


* Assignments
You have to make one assignment per week.
Every week we will make new groups of two students, hence every week you have to work together with another student.
The reason behind this is to help all of you expand your network, which we find very important in the current situation.
We realize this is perhaps not what all of you like, but this seems the best we can do to really help you get started and work with other students.
You should also know that in professional life you will often have to work in different teams and with many different people.
You'd better learn such skills early in your carreer.

There are 7 assignments, one for each lecture week.
A large part of the exercises in the assignment are intentionally simple, they are meant to get you started and become familiar with the material.
An assignment often consists of two parts.
One part is analytic in which you have to derive and explain a solution, in mathematical notation.
The other part is about coding, simulation, making plots, and so on.
Sometimes  we provide you with some code, and then your task is to explain how and why it works.
In other cases you have build a simple computer program, describe how it works, and run it.


About the use of python in the exercises: You don't have to use python, but you have to be able to read it.
First, in general, you should get used to reading different computer languages.
For instance, when you have to access databases to obtain data about customers, patients, clients, suppliers, inventory, demand, lifetimes, whatever, you often have to use \texttt{sql}, perhaps within \texttt{R} or python.
(In fact, many companies use many different databases: SAS, postgresql, SAP, Microsoft access, excel, Elastic, all with their own specifics) Second, while I (= NvF) worked at a bank, I used Fortran for numerical work, awk for string parsing and making tables, excel, SAS to access the database, and matlab for other numerical work, all next to each other.
I got tired of this, so I went to using python as it did all of this stuff, but then within one language.
Finally, based on the statistics, \href{https://www.tiobe.com/tiobe-index/}{here} or \href{https://www.northeastern.edu/graduate/blog/most-popular-programming-languages/}{here}, of the most popular programming languages, python scores (much) higher than R; if you opt for a business career, the probability you have to use python is simply higher than to have to use R.

You should become familiar with look up documentation on coding on the web, no matter your programming language of choice. Invest time in understanding the, at times, rather technical and terse, explanations.  Once you are used to it, the core documentation is faster to read, i.e., less clutter. In the long run, it pays off. 


Assessment: Come to the office and explain your document. If you cannot\ldots



* Interesting other literature

There are a number of books that you might like too. (From experience I can tell that reading different types of explanation can be very helpful when stuck.)
1. [[https://faculty.math.illinois.edu/~r-ash/BPT.html][R.B. Ash]]: Basic probability theory, free online
2. [[https://math.dartmouth.edu/~prob/prob/prob.pdf][C.M. Grinsted and J. Laurie Snell]]: Introduction to probablity, also free online
3. F.M. Dekking, et al.: A Modern Introduction to Probability and Statistics, Understanding Why and How. 

After the course you might be interested in the following two books that I liked a lot. 
1. D.V. Lindley, Understanding Uncertainty. This book explains why probability theory is the way it is. There are three rules that any coherent system of probabilities has to satisfy. 
   1. For any event $E$, $\P{E} \in [0,1]$; 
   2. $\P{E \text{ or } F} = \P{E} + \P{F} - \P{EF}$; 
   3. $\P{EF} = \P{F\given E} \P{E}$. 
   If you want to understand probability in terms of betting, any sensible strategy you can imagine should satify   these rules, for otherwise people can use arbitrage (an essential idea in the financial theory and asset and option pricing) to consistently make  money from you.  
2. E.T. Jaynes, Probability Theory: The Logic of Science. It is hard at times, but very interesting. it discusses  applications and ideas behind probability and statistics, and how to think about these topics as a sensible person (not just as a theoretician).
3. C. Bishop, Pattern recognition and Machine learning. This is a really nice book on data analysis and  machine learning. After the course you can read the first two chapters. At the end of the master, you can read most of the book. 





* Questions

- Post your questions on the discussion board. We or fellow students will either answer them there. I will answer questions of general interest via youtube movies, or otherwise.

* Exam

At the exam we will pay attention to details and computational errors. Why? Because /You should learn to check/.
One reason for this is that checks require the application of many different methods and strategies to solve probability problems.
Hence, you will look at the same problem from different angles, so that you learn a lot.
A second reason is that not checking thoroughly is, simply put, unacceptable. 
To see why, consider this example:  you bring your car to a mechanic to have the tires changed.
The mechanic is too lazy to check whether the bolts are tight.
As a result, you get an accident, and when you wake up in hospital, your left arm has to be amputated.
The anesthesiologist does not see the need to check the type of anesthetic nor the dose you need, so you kidneys are permanently damaged.
The surgeon prefers to take a few beers before the operation starts, rather than checking what body part to amputate, so s/he removes your right leg instead of your left arm.
The nurses are busy with their phones during the operation, because they find check work sooo boring\ldots Other example, the programs by which your pension is computed over the years is extremely buggy, because the programmer did not like writing tests for the code.
As a result, your lose 500 000 Euro on your final pension.
I guess you get the point by now.
As all people, /you/ find it /unacceptable/ when the mechanic, surgeon, and so on, don't check their work.
Well, the same principle applies to you.
Not checking is unacceptable, for you, for me, for anybody




* TODO Grading

Assignment.
You have to turn in the parts that are below and at exam level.
The highest grade you can get for these parts is an 8.
For a 10 you have to turn in the above exam level parts. x

**** TODO Assignment due dates







* Contact info 

- dr. N.D van Foreest, Duis 666, 050-363 51 78, n.d.van.foreest@rug.nl
- E.R. van Beesten
- Teaching assistent

